参考博客：
    https://www.jianshu.com/p/7e47a4503b87
分布式锁：
  使用场景：
    1、任务运行：多个节点同一时刻同一个任务只能在一个节点上运行（分片任务除外）
    2、交易请求接收：前端交易请求发送时，可能由于两次提交，后端需要识别出这是一个交易
  实现方式：zookeeper、redis、database

Redis 常见的四种部署架构：
    单机模式、主从模式、哨兵模式、集群模式

Redis普通分布式锁实现：
  原理：获取锁时使用redis的命令setnx、pexpire（提供基于毫秒的过期时间，expire提供基于秒的过期时间）+
        lua脚本（保证脚本中的命令被一起执行，不间断）来实现分布式锁。删除锁时，先执行get，如果获取的值是自己设置的，
        则执行del操作，同时，这两个操作也放在lua脚本中执行，来保证原子性。
  这类琐最大的缺点：
      加锁时只作用在一个Redis节点上，即使Redis通过sentinel(哨兵)保证高可用，如果这个master节点由于某些
      原因发生了主从切换，那么就会出现锁丢失的情况：
      在Redis的master节点上拿到了锁；但是这个加锁的key还没有同步到slave节点；
      master故障，发生故障转移，slave节点升级为master节点；导致锁丢失

Redisson 框架
