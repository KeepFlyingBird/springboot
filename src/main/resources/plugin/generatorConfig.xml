<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!--id:必选，上下文id，用于在生成错误时提示
        targetRuntime：此属性用于指定生成的代码的运行时环境，默认值：MyBatis3。
        defaultModelType：这个属性定义了MBG如何生成实体类。
            flat：该模型为每一张表只生成一个实体类。这个实体类包含表中的所有字段
    -->
    <context id="mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- MyBatis Generator  自带分页插件   -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>
        <!-- 覆盖xml文件 -->
        <plugin type="cn.freefly.springboot.mybatis.plugin.OverwriteXmlPlugin" />
        <!-- 避免生成Example类-->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$"/>
            <property name="replaceString" value="Criteria"/>
        </plugin>
        <!-- 使用自带序列化插件 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>


        <!-- 整合lombok插件-->
        <plugin type="cn.freefly.springboot.mybatis.plugin.LombokPlugin" >
            <property name="hasLombok" value="true"/>
        </plugin>

        <!-- 对注释进行控制 -->
        <commentGenerator>
            <!-- 阻止生成注释 -->
            <property name="suppressAllComments" value="true"/>
            <!-- suppressDate 阻止生成的注释包含时间戳 -->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://10.0.3.4:3306/jy_fund"
                userId="dev_user"
                password="dev_user@jy28%JK">
        </jdbcConnection>

        <!-- j指定JDBC类型和Java类型如何转换 -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- 控制生成的实体类
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成实体类存放的包名，一般就是放在该包下
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="cn.freefly.springboot.mybatis.entity" targetProject="src/main/java">
            <!-- 该属性只对MyBatis3有效，如果true就会使用构造方法入参，如果false就会使用setter方式。默认为false -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName
                如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false
             -->
            <property name="enableSubPackages" value="true"/>
            <!--
                该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，
                都会使用构造方法入参，并且不会生成setter方法。如果为false，实体类属性就可以改变。默认为false
             -->
            <property name="immutable" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，
                所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
         -->
        <sqlMapGenerator targetPackage="mapper/generator" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>


        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="cn.freefly.springboot.mybatis.mapper" type="XMLMAPPER"
                             targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            tableName（必要）：要生成对象的表名；
            domainObjectName 给表对应的 model 起名字
            注意：大小写敏感问题。
         -->
        <!--<table tableName="test" domainObjectName="TestEntity">

            &lt;!&ndash;用来修改表中某个列的属性,一个table元素中可以有多个columnOverride元素哈.
                property属性来指定列要生成的属性名称.
             &ndash;&gt;
            &lt;!&ndash;<columnOverride column="username" property="userName" />&ndash;&gt;
        </table>-->

        <!--<table tableName="person" domainObjectName="Person"/>-->
        <table tableName="cmbc_loan" domainObjectName="CmbcLoan">
            <generatedKey column="id" sqlStatement="JDBC" identity="true" />
        </table>
        <!--<table tableName="pa_mq_access_log" domainObjectName="MqAccessLog">-->
            <!--<generatedKey column="id" sqlStatement="JDBC" identity="true" />-->
        <!--</table>-->

    </context>

</generatorConfiguration>